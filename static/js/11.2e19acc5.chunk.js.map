{"version":3,"sources":["utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","hooks/useTickets.ts","utils/callHelpers.ts","components/Input/Input.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/UnlockButton.tsx","hooks/useTokenBalance.ts","config/index.ts","config/constants/ifo.ts","config/constants/index.ts","utils/lotteryUtils.js","components/Input/index.ts","utils/erc20.ts","hooks/useGetLotteryHasDrawn.ts","hooks/useHarvest.ts","hooks/useBuyLottery.ts","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TreeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/PlantedTreeCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useIfoContract","ifo","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","rabbitmintingfarm","usePancakeRabbits","pancakeRabbits","useLottery","lottery","getLotteryAddress","useLotteryTicket","lotteryTicket","getLotteryTicketAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","find","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","useTotalRewards","rewards","setRewards","lotteryContract","fastRefresh","useRefresh","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","ticketsContract","useCallback","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","approve","lpContract","masterChefContract","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","StyledSpacer","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","UnlockButton","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","call","supply","fetchTotalSupply","useTotalSupplyTree","treeABI","getTreeAddress","useBurnedBalance","tokenAddress","setBalance","balanceOf","bal","useBurnedBalanceTree","useTokenBalance","getTokenBalance","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","CAKE_POOL_PID","ifos","isActive","name","subTitle","description","launchDate","launchTime","saleAmount","raiseAmount","cakeToBurn","projectSiteUrl","currency","currencyAddress","tokenDecimals","releaseBlockNumber","farmsConfig","filter","farm","isCommunity","tokenSymbol","multiCall","calls","getWeb3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","console","error","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","ticketAbi","tokenIds","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","getLotteryStatus","multiClaim","claimedStatus","unClaimedIds","lotteryAbi","finanltokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","parseInt","historyNumbers","winningNumbers","provider","getAllowance","allowance","userAddress","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","useHarvest","farmPid","dispatch","useDispatch","onReward","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","accum","Promise","all","useSousHarvest","isUsingBnb","handleHarvest","updateUserPendingReward","updateUserBalance","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","useMultiBuyLottery","onMultiBuy","log","useMaxNumber","max","setMax","fetchMax","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onSelectMax","toLocaleString","BuyTicketModal","onDismiss","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","title","e","currentTarget","Tips","Announce","Final","fullWidth","variant","disabled","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","params","multicall","masterChefABI","rawResults","results","fetchBalances","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","Card","Block","CardImage","img","Label","textSubtle","Actions","FarmedStakingCard","farmsWithBalance","eggPrice","usePriceCakeBusd","earning","balancesWithValue","balanceType","farmWithBalance","harvestAllFarms","mb","src","alt","width","height","CakeWinnings","LotteryJackpot","StyledLotteryCard","requesteClaim","setRequestedClaim","handleClaim","useModal","tokenName","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","treePerBlock","TreeStats","usePriceTreeBusd","StyledTotalValueLockedCard","StyledCard","TotalValueLockedCard","totalValue","useTotalValue","StyledPlantedTreeCard","PlantedTreeCard","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","total_value_locked_all","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","bnbPrice","usePriceBnbBusd","maxAPY","MIN_VALUE","getHighestAPY","activeFarms","multiplier","lpSymbol","calculateAPY","farmsToDisplay","cakePriceVsBNB","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","poolWeight","cakeRewardPerYear","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","isFinished","includes","latestPools","orderBy","assets","join","useLotteryTotalPrizesUsd","totalRewards","WinCard","lotteryPrize","round","Hero","Cards","BaseLayout","sm","CardT","CTACards","FullPageCard","Footer","Home","Page","as","FarmStakingCard","LotteryCard"],"mappings":"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","file":"static/js/11.2e19acc5.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport treeABI from 'config/abi/tree.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getTreeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useTotalSupplyTree = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(treeABI, getTreeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useBurnedBalanceTree = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(treeABI, getTreeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(0.15)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 0\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'blink',\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\n    isActive: false,\n    name: 'BLINk (BLK)',\n    subTitle: 'Online games on BSC',\n    description:\n      'BLINk enables BNB holders to enjoy gaming experiences that WINk users on Tron have been enjoying for over two years.',\n    launchDate: 'Nov. 20',\n    launchTime: '9PM SGT',\n    saleAmount: '100,000,000 BLINK',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://blink.wink.org',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 6,\n    releaseBlockNumber: 3279767,\n  },\n  {\n    id: 'ditto',\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\n    isActive: false,\n    name: 'Ditto (DITTO)',\n    subTitle: 'Next-gen elastic supply token',\n    description:\n      'Ditto is the first elastic supply token on the Binance Smart Chain. Its goal is to maintain a stable price of $1, where its supply will adapt to changes in demand. All supply changes will apply equally to every wallet holding Ditto, and holders should always have the same % of the total supply',\n    launchDate: 'Dec. 23',\n    launchTime: '3PM SGT',\n    saleAmount: '700,000 DITTO',\n    raiseAmount: '$630,000',\n    cakeToBurn: '$315,000',\n    projectSiteUrl: 'https://ditto.money/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 9,\n    releaseBlockNumber: 3279767,\n  },\n  {\n    id: 'tenet',\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\n    isActive: false,\n    name: 'Tenet (TEN)',\n    subTitle: 'Cross-chain Automated Market Maker',\n    description:\n      'Tenet is a cross-chain Automated Market Maker (AMM) connector that provides a decentralized Liquidity Tap for various tokens. The Liquidity Tap is the powerhouse of the Liquidity Pool, employing a dynamic algorithm to give the Liquidity Provider fairer, more efficient, and richer incentives. Tenet aims to build a cross-chain and cross-platform toolkit protocol that allows the demand side to customize the parameters of the liquidity tap, allowing them to reach out to more liquidity participants effectively and with relative ease.',\n    launchDate: 'Jan. 5',\n    launchTime: '3PM SGT',\n    saleAmount: '1,000,000 TEN',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://www.tenet.farm/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 3483883,\n  },\n  {\n    id: 'helmet',\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\n    isActive: false,\n    name: 'Helmet.insure (Helmet)',\n    subTitle: 'Crypto-assets insurance trading platform',\n    description:\n      'Helmet is a peer-to-peer insurance protocol written with options trading logic, which allows anyone to create any insurance policy easily in the market. Helmet aims to enable DeFi users to be protected against the risk of price fluctuations by providing price-shield insurance for BSC assets. They provide suppliers with a range of insurance types to sell, giving a variety of hedging strategies to the market.',\n    launchDate: 'Jan. 13',\n    launchTime: '5PM SGT',\n    saleAmount: '10,000,000 Helmet',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://www.helmet.insure/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 3771926,\n  },\n  {\n    id: 'soteria',\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\n    isActive: true,\n    name: 'Soteria',\n    subTitle: 'A blockchain based mutual to share the risk of DeFi on Binance Smart Chain',\n    description:\n      'Soteria allows users to buy insurance cover to greatly diminish or reduce the financial risk of hacks. It replaces the idea of a traditional insurance company, because it is wholly owned by the members. The model encourages engagement as members receive economic incentives for participating in Risk Assessment, Claims Assessment and Governance.',\n    launchDate: 'Jan. 21',\n    launchTime: '4PM SGT',\n    saleAmount: '1,500,000 wSOTE',\n    raiseAmount: '$525,000',\n    cakeToBurn: '$262,500',\n    projectSiteUrl: 'https://soteria.finance/#/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 4086064,\n  },\n]\n\nexport default ifos\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenids = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e18 / 10\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","export { default } from './Input'\nexport type { InputProps } from './Input'\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        console.log(\"****contract = \", lotteryContract, \"amount = \", amount, \"number = \", numbers, \"account = \", account)\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(new BigNumber(10))))\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy('10', numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > 50) {\n      setVal('50')\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * 10\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"SEED\"\n      />\n      <div>\n        <Tips>{TranslateString(456, 'Your amount must be a multiple of 10 SEED')}</Tips>\n        <Tips>{TranslateString(458, '1 Ticket = 10 SEED')}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your SEED cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} SEED`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={pendingTx || parseInt(val) > Number(maxTickets) || parseInt(val) > 50 || parseInt(val) < 1}\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingTree',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingTree',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url(/images/egg/bgwallet2.png);\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-size: 65%;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'SEED to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n          {/* <CakeHarvestBalance earningsSum={0}/> */}\n          {/* <Label>~$0</Label> */}\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'SEED in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n          {/* <CakeWalletBalance cakeBalance={0} />\n          <Label>~$0</Label> */}\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting SEED')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n                {/* : TranslateString(999, `Harvest all 0`)} */}\n                </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWinnings = () => {\n  const { claimAmount } = useTotalClaim()\n  // return <CardValue value={getBalanceNumber(claimAmount)} />\n  return <CardValue value={0} />\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\n\nconst LotteryJackpot = () => {\n  const lotteryPrizeAmount = useTotalRewards()\n\n  return (\n    <Text bold fontSize=\"24px\">\n      {/* {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\n        maximumFractionDigits: 2,\n      })} */}\n      0.00\n    </Text>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-size: 50%;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst FarmedStakingCard = () => {\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requesteClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const { claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim])\n\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"TREE\" />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(550, 'Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <CakeWinnings />\n          <Label>{TranslateString(552, 'SEED to Collect')}</Label>\n        </Block>\n        <Block>\n          <LotteryJackpot />\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\n        </Block>\n        <Actions>\n          <Button\n            id=\"dashboard-collect-winnings\"\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\n            onClick={handleClaim}\n            style={{ marginRight: '8px' }}\n          >\n            {TranslateString(556, 'Collect Winnings')}\n          </Button>\n          <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\n            {TranslateString(558, 'Buy Tickets')}\n          </Button>\n        </Actions>\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let treePerBlock = 0;\n  if(farms && farms[0] && farms[0].treePerBlock){\n    treePerBlock = new BigNumber(farms[0].treePerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(53401, 'SEED Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n          {/* <CardValue fontSize=\"14px\" value={0} decimals={0} prefix=\"$\" /> */}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n          {/* {totalSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />} */}\n          </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n          {/* <CardValue fontSize=\"14px\" value={0} decimals={0} /> */}\n          </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n          {/* {cakeSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />} */}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(5400, 'New SEED/block')}</Text>\n          <Text bold fontSize=\"14px\">{treePerBlock}</Text>\n          {/* <Text bold fontSize=\"14px\">0.1</Text> */}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupplyTree, useBurnedBalanceTree } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getTreeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceTreeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TreeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupplyTree()\n  const burnedBalance = useBurnedBalanceTree(getTreeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceTreeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let treePerBlock = 0;\n  if(farms && farms[0] && farms[0].treePerBlock){\n    treePerBlock = new BigNumber(farms[0].treePerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'TREE Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n          {/* <CardValue fontSize=\"14px\" value={0} decimals={0} prefix=\"$\" /> */}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n          {/* {totalSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />} */}\n          </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n          {/* <CardValue fontSize=\"14px\" value={0} decimals={0} /> */}\n          </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n          {/* {cakeSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />} */}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New TREE/block')}</Text>\n          <Text bold fontSize=\"14px\">0</Text>\n          {/* <Text bold fontSize=\"14px\">0.1</Text> */}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default TreeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  flex: 1;\n`\n\nconst StyledCard = styled.div`\n  text-align-last: center;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <StyledCard>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n            {/* <CardValue value={0} prefix=\"$\" decimals={2}/> */}\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </StyledCard>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledPlantedTreeCard = styled(Card)`\n  background: linear-gradient(#0BAB64, #3BB78F);\n  align-items: center;\n  display: flex;\n  flex: 1;\n  text-align: center;\n  width: 100%;\n  & > div {\n    width: 100%;\n    background-image: url('/images/bgtreecard-sx.png'), url('/images/bgtreecard-dx.png');\n    background-repeat: no-repeat;\n    background-size: 25%;\n    background-position: bottom left, bottom right;\n    margint-bottom: 0px;\n  }\n`\n\nconst PlantedTreeCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledPlantedTreeCard>\n      <CardBody>\n        <Heading color=\"invertedContrast\" size=\"lg\" mb=\"24px\">\n          {TranslateString(762, '🌱 Total Planted Trees (TPT)')}\n        </Heading>\n        {data ? (\n          <>\n            {/* <Heading color=\"invertedContrast\" size=\"xl\">{`${tvl}`}</Heading> */}\n            <Heading color=\"invertedContrast\" size=\"xl\">3000!</Heading>\n            <Text color=\"invertedContrast\">{TranslateString(764, 'We use one third of all deposit fees to plant trees around the world')}</Text>\n          </>\n        ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n      </CardBody>\n    </StyledPlantedTreeCard>\n  )\n}\n\nexport default PlantedTreeCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/stat`)\n        const responsedata: ApiStatResponse = await response.json()\n\n        setData(responsedata)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpSymbol !== 'TREE-BUSD LP')\n\n    calculateAPY(activeFarms)\n\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#0bab64\">\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#0BAB64,#3BB78F);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAssetCard = () => {\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.tokenName.includes('SEED'))\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include TREE\n  const assets = ['SEED', ...latestPools.map((pool) => pool.tokenName)].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn\n        </Heading>\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Pools\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from './useTickets'\n\nconst useLotteryTotalPrizesUsd = () => {\n  const totalRewards = useTotalRewards()\n  const totalCake = getBalanceNumber(totalRewards)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  return totalCake * cakePriceBusd.toNumber()\n}\n\nexport default useLotteryTotalPrizesUsd\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd()).toLocaleString()\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Lottery with\n        </Heading>\n        <CardMidContent color=\"#0bab64\">${lotteryPrize}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            up for grabs\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TreeStats from './components/TreeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport PlantedTreeCard from './components/PlantedTreeCard'\nimport EarnAPYCard from './components/EarnAPYCard'\nimport EarnAssetCard from './components/EarnAssetCard'\nimport WinCard from './components/WinCard'\n\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/treeswapsx.svg'), url('/images/treeswapdx.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CardT = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 12;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst FullPageCard = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 12;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 12;\n    }\n  }\n`\n\nconst Footer = styled.div`\n  background-image: url(/images/footerbg.svg);\n  background-position: bottom;\n  background-repeat-x: repeat;\n  background-repeat-y: no-repeat;\n  padding-bottom: 17%;\n  background-size: 50%;\n`\n\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <div>\n      <Page>\n        <Hero>\n          <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n            {TranslateString(576, 'TreeSwap')}\n          </Heading>\n          <Text>{TranslateString(578, 'The most eco friendly yield farm on Binance Smart Chain.')}</Text>\n        </Hero>\n        <div>\n          <FullPageCard>\n            <PlantedTreeCard/>\n          </FullPageCard>\n          <Cards>\n            <FarmStakingCard />\n            <LotteryCard />\n          </Cards>\n          <Cards>\n            <CakeStats />\n            <TreeStats />\n          </Cards>\n          <CardT>\n            <TotalValueLockedCard />\n          </CardT>\n          <CTACards>\n            <EarnAPYCard />\n            <EarnAssetCard />\n            <WinCard />\n          </CTACards>\n        </div>\n      </Page>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}