{"version":3,"sources":["hooks/useTokenBalance.ts","config/index.ts","hooks/useBlock.ts","../node_modules/lodash/orderBy.js","utils/getTimePeriods.ts","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseMap.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","views/Nft/components/HowItWorks.tsx","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/SecondaryCard.tsx","views/Nft/components/CardContent.tsx","views/Nft/components/NoNftsToClaimCard.tsx","views/Nft/components/YouWonCard.tsx","views/Nft/components/NftInWalletCard.tsx","views/Nft/components/StatusCard.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useTotalSupplyTree","treeABI","getTreeAddress","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useBurnedBalanceTree","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","config","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","CAKE_POOL_PID","useBlock","useContext","BlockContext","baseOrderBy","require","isArray","module","exports","collection","iteratees","orders","guard","undefined","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","arrayMap","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","length","iteratee","value","index","result","key","object","other","baseEach","isArrayLike","Array","array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","StyledHowItWorks","styled","div","theme","colors","textSubtle","Section","Icon","Text","UIKitText","Row","HowItWorks","TranslateString","useI18n","Container","id","color","size","mb","as","href","target","rel","InfoRow","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","getPancakeRabbitContract","contractOptions","pancakeRabbitsAbi","pancakeRabbits","PANCAKE_RABBITS_ADDRESS","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","canClaim","hasClaimed","countBunniesBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","bunnyMap","state","setState","currentBlock","multicall","rabbitmintingfarm","address","RABBIT_MINTING_FARM_ADDRESS","name","startBlockNumberArr","endBlockNumberArr","countBunniesBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","prevState","toNumber","console","error","fetchContractData","pancakeRabbitsContract","params","canClaimArr","hasClaimedArr","getTokenIdAndBunnyId","tokenOfOwnerByIndex","tokenId","getBunnyId","bunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","getTokenIds","reInitialize","Value","ModalContent","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isLoading","setIsLoading","setError","rabbitMintingContract","useRabbitMintingFarm","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","fullWidth","variant","onClick","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","bunnyCount","bunnyBurnCount","walletCanClaim","originalImage","description","isSupplyAvailable","walletOwnsNft","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","substr","join","TimeLeft","Heading","Link","UIKitLink","Message","ProgressWrap","NftProgress","secondsRemaining","progress","primaryStep","NftProgressSimple","SecondaryCard","textDisabled","Content","StyledCardContent","CardContent","imgSrc","NoNftsToClaimCard","YouWonCard","NftInWalletCard","StatusCard","UnlockButton","StyledNtfInfo","NftInfo","StyledHero","Nft","Page"],"mappings":"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","file":"static/js/13.bfa8137c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport treeABI from 'config/abi/tree.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getTreeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useTotalSupplyTree = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(treeABI, getTreeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useBurnedBalanceTree = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(treeABI, getTreeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(0.15)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 0\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","// @ts-nocheck\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text as UIKitText, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst StyledHowItWorks = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  padding: 24px 0;\n`\n\nconst Section = styled.div`\n  margin-bottom: 24px;\n`\n\nconst Icon = styled.div`\n  text-align: center;\n`\n\nconst Text = styled(UIKitText)`\n  flex: 1;\n  padding: 0 8px;\n`\n\nconst Row = styled.div`\n  align-items: start;\n  display: flex;\n  margin-bottom: 16px;\n`\n\nconst HowItWorks = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <StyledHowItWorks>\n        <Section>\n          <Heading id=\"how-it-works\" color=\"secondary\" size=\"lg\" mb=\"16px\">\n            {TranslateString(632, 'How it works')}\n          </Heading>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(\n                634,\n                'Winners will be able to claim an NFT on this page once the claiming period starts.',\n              )}\n            </Text>\n          </Row>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(636, 'If you’re not selected, you won’t be able to claim. Better luck next time!')}\n            </Text>\n          </Row>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(\n                638,\n                \"Winners can trade in their NFTs for a TREE value until the expiry date written below. If you don't trade in your NFT by then, don’t worry: you’ll still keep it in your wallet!\",\n              )}\n            </Text>\n          </Row>\n        </Section>\n        <Section>\n          <Heading color=\"secondary\" size=\"lg\" mb=\"16px\">\n            {TranslateString(640, 'How are winners selected?')}\n          </Heading>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>{TranslateString(642, 'Winners are selected at random! Good luck!')}</Text>\n          </Row>\n        </Section>\n        <div>\n          <Button\n            as=\"a\"\n            href=\"https://docs.google.com/forms/d/e/1FAIpQLSfToBNlovtMvTZFSwOhk0TBiDPMGasLxqG0RB-kJN85HR_avA/viewform\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {TranslateString(644, 'Register for a chance to win')}\n          </Button>\n        </div>\n      </StyledHowItWorks>\n    </Container>\n  )\n}\n\nexport default HowItWorks\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport { RABBIT_MINTING_FARM_ADDRESS, PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\n\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getRabbitMintingContract = (contractOptions?: ContractOptions) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return getContract(rabbitMintingFarmAbi, RABBIT_MINTING_FARM_ADDRESS, contractOptions)\n}\n\nexport const getPancakeRabbitContract = (contractOptions?: ContractOptions) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return getContract(pancakeRabbitsAbi, PANCAKE_RABBITS_ADDRESS, contractOptions)\n}\n\nexport default getRabbitMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getPancakeRabbitContract } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  canClaim: boolean\n  hasClaimed: boolean\n  countBunniesBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  bunnyMap: BunnyMap\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (bunnyId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    canClaim: false,\n    hasClaimed: false,\n    countBunniesBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    bunnyMap: {},\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBunniesBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n        ] = await multicall(rabbitmintingfarm, [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'startBlockNumber' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'endBlockNumber' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'countBunniesBurnt' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBunniesBurnt]: [BigNumber] = countBunniesBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBunniesBurnt: countBunniesBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const pancakeRabbitsContract = getPancakeRabbitContract()\n        const [canClaimArr, hasClaimedArr] = await multicall(rabbitmintingfarm, [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n        ])\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n        const [canClaim]: [boolean] = canClaimArr\n        const [hasClaimed]: [boolean] = hasClaimedArr\n\n        let bunnyMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the bunnyId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await pancakeRabbitsContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const bunnyId = await pancakeRabbitsContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(bunnyId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same bunny so the format is:\n          // { [bunnyId]: [array of tokenIds] }\n          bunnyMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId] = association\n\n            return {\n              ...accum,\n              [bunnyId]: accum[bunnyId] ? [...accum[bunnyId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          canClaim,\n          hasClaimed,\n          balanceOf,\n          bunnyMap,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (bunnyId: number) => state.bunnyMap[bunnyId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  const handleConfirm = async () => {\n    try {\n      await rabbitMintingContract.methods\n        .mintNFT(nft.bunnyId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError('You must have a TREE balance greater than zero to claim NFT')\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await rabbitMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>10 TREE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive TREE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const pancakeRabbitsContract = usePancakeRabbits(PANCAKE_RABBITS_ADDRESS)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getPancakeRabbitContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    bunnyCount: 0,\n    bunnyBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    canClaim,\n    hasClaimed,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n  } = useContext(NftProviderContext)\n  const walletCanClaim = canClaim && !hasClaimed\n  const { bunnyId, name, previewImage, originalImage, description } = nft\n  const tokenIds = getTokenIds(bunnyId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getPancakeRabbitContract()\n      const bunnyCount = await methods.bunnyCount(bunnyId).call()\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        bunnyCount: parseInt(bunnyCount, 10),\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [bunnyId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')}\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for TREE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Value if traded in')}:</Text>\n              <Value>10 TREE</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>{state.bunnyCount + state.bunnyBurnCount}</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number burned')}:</Text>\n              <Value>{state.bunnyBurnCount}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBunniesBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <ProgressWrap>\n          <Progress primaryStep={progress} />\n        </ProgressWrap>\n        <TimeLeft>\n          {timeLeft ? TranslateString(999, `${timeLeft} left to trade in NFTs`) : TranslateString(999, 'Finished!')}\n        </TimeLeft>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBunniesBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Can be traded until')}:</Text>\n          <div>\n            {!isInitialized ? (\n              '...'\n            ) : (\n              <Link href={`https://bscscan.com/block/${endBlockNumber}`} target=\"_blank\" rel=\"noreferrer noopener\">\n                {`Block ${endBlockNumber}`}\n                <OpenNewIcon color=\"primary\" ml=\"2px\" />\n              </Link>\n            )}{' '}\n          </div>\n        </InfoRow>\n        <Message>{TranslateString(999, 'NFTs can be traded in for TREE until the above block height')}</Message>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBunniesBurnt } = useContext(\n    NftProviderContext,\n  )\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBunniesBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import styled from 'styled-components'\n\nconst SecondaryCard = styled.div`\n  align-items: start;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 32px;\n  display: flex;\n  padding: 24px;\n`\n\nexport default SecondaryCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  margin-right: 16px;\n  width: 56px;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nconst StyledCardContent = styled.div`\n  align-items: start;\n  display: flex;\n`\n\nconst CardContent = ({ imgSrc, children }) => {\n  return (\n    <StyledCardContent>\n      <Image src={imgSrc} alt=\"card icon\" />\n      <Content>{children}</Content>\n    </StyledCardContent>\n  )\n}\n\nexport default CardContent\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport SecondaryCard from './SecondaryCard'\nimport CardContent from './CardContent'\n\nconst NoNftsToClaimCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <SecondaryCard>\n      <CardContent imgSrc=\"/images/present-disabled.svg\">\n        <Heading mb=\"8px\">{TranslateString(999, 'No NFTs to claim')}</Heading>\n        <Text>\n          {TranslateString(\n            999,\n            'You have no NFTs to claim at this time, but you can still see the NFTs in this series below.',\n          )}\n        </Text>\n      </CardContent>\n    </SecondaryCard>\n  )\n}\n\nexport default NoNftsToClaimCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst YouWonCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'You won!')}</Heading>\n          <Text>{TranslateString(999, 'Claim an NFT from the options below!')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default YouWonCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst NftInWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFT in wallet')}</Heading>\n          <Text>{TranslateString(999, 'Trade in your NFT for TREE, or just keep it for your collection.')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftInWalletCard\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NoNftsToClaimCard from './NoNftsToClaimCard'\nimport YouWonCard from './YouWonCard'\nimport NftInWalletCard from './NftInWalletCard'\n\n/**\n * Possible states\n *\n * 1. Disconnected wallet\n * 2. No NFT's to claim\n * 3. You won an NFT\n * 4. NFT in wallet\n */\nconst StatusCard = () => {\n  const { account } = useWallet()\n  const { isInitialized, canClaim, hasClaimed, balanceOf } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return (\n      <Card isActive>\n        <CardBody>\n          <Heading mb=\"8px\">{TranslateString(999, 'Wallet Disconnected')}</Heading>\n          <Text mb=\"16px\">{TranslateString(999, 'Connect to see if you have won an NFT!')}</Text>\n          <UnlockButton />\n        </CardBody>\n      </Card>\n    )\n  }\n\n  if (!isInitialized) {\n    return <Text>...</Text>\n  }\n\n  if (!hasClaimed && canClaim) {\n    return <YouWonCard />\n  }\n\n  if (balanceOf > 0) {\n    return <NftInWalletCard />\n  }\n\n  return <NoNftsToClaimCard />\n}\n\nexport default StatusCard\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n      <StatusCard />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for TREE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n        <HowItWorks />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}