{"version":3,"sources":["utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","components/UnlockButton.tsx","config/constants/ifo.ts","config/constants/index.ts","utils/erc20.ts"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useIfoContract","ifo","useERC20","erc20","useCake","getCakeAddress","useRabbitMintingFarm","rabbitmintingfarm","usePancakeRabbits","pancakeRabbits","useLottery","lottery","getLotteryAddress","useLotteryTicket","lotteryTicket","getLotteryTicketAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","find","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","ifos","isActive","name","subTitle","description","launchDate","launchTime","saleAmount","raiseAmount","cakeToBurn","projectSiteUrl","currency","currencyAddress","tokenDecimals","releaseBlockNumber","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","getContract","provider","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","balanceOf"],"mappings":"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","file":"static/js/3.c47deba7.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'blink',\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\n    isActive: false,\n    name: 'BLINk (BLK)',\n    subTitle: 'Online games on BSC',\n    description:\n      'BLINk enables BNB holders to enjoy gaming experiences that WINk users on Tron have been enjoying for over two years.',\n    launchDate: 'Nov. 20',\n    launchTime: '9PM SGT',\n    saleAmount: '100,000,000 BLINK',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://blink.wink.org',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 6,\n    releaseBlockNumber: 3279767,\n  },\n  {\n    id: 'ditto',\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\n    isActive: false,\n    name: 'Ditto (DITTO)',\n    subTitle: 'Next-gen elastic supply token',\n    description:\n      'Ditto is the first elastic supply token on the Binance Smart Chain. Its goal is to maintain a stable price of $1, where its supply will adapt to changes in demand. All supply changes will apply equally to every wallet holding Ditto, and holders should always have the same % of the total supply',\n    launchDate: 'Dec. 23',\n    launchTime: '3PM SGT',\n    saleAmount: '700,000 DITTO',\n    raiseAmount: '$630,000',\n    cakeToBurn: '$315,000',\n    projectSiteUrl: 'https://ditto.money/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 9,\n    releaseBlockNumber: 3279767,\n  },\n  {\n    id: 'tenet',\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\n    isActive: false,\n    name: 'Tenet (TEN)',\n    subTitle: 'Cross-chain Automated Market Maker',\n    description:\n      'Tenet is a cross-chain Automated Market Maker (AMM) connector that provides a decentralized Liquidity Tap for various tokens. The Liquidity Tap is the powerhouse of the Liquidity Pool, employing a dynamic algorithm to give the Liquidity Provider fairer, more efficient, and richer incentives. Tenet aims to build a cross-chain and cross-platform toolkit protocol that allows the demand side to customize the parameters of the liquidity tap, allowing them to reach out to more liquidity participants effectively and with relative ease.',\n    launchDate: 'Jan. 5',\n    launchTime: '3PM SGT',\n    saleAmount: '1,000,000 TEN',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://www.tenet.farm/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 3483883,\n  },\n  {\n    id: 'helmet',\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\n    isActive: false,\n    name: 'Helmet.insure (Helmet)',\n    subTitle: 'Crypto-assets insurance trading platform',\n    description:\n      'Helmet is a peer-to-peer insurance protocol written with options trading logic, which allows anyone to create any insurance policy easily in the market. Helmet aims to enable DeFi users to be protected against the risk of price fluctuations by providing price-shield insurance for BSC assets. They provide suppliers with a range of insurance types to sell, giving a variety of hedging strategies to the market.',\n    launchDate: 'Jan. 13',\n    launchTime: '5PM SGT',\n    saleAmount: '10,000,000 Helmet',\n    raiseAmount: '$1,000,000',\n    cakeToBurn: '$500,000',\n    projectSiteUrl: 'https://www.helmet.insure/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 3771926,\n  },\n  {\n    id: 'soteria',\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\n    isActive: true,\n    name: 'Soteria',\n    subTitle: 'A blockchain based mutual to share the risk of DeFi on Binance Smart Chain',\n    description:\n      'Soteria allows users to buy insurance cover to greatly diminish or reduce the financial risk of hacks. It replaces the idea of a traditional insurance company, because it is wholly owned by the members. The model encourages engagement as members receive economic incentives for participating in Risk Assessment, Claims Assessment and Governance.',\n    launchDate: 'Jan. 21',\n    launchTime: '4PM SGT',\n    saleAmount: '1,500,000 wSOTE',\n    raiseAmount: '$525,000',\n    cakeToBurn: '$262,500',\n    projectSiteUrl: 'https://soteria.finance/#/',\n    currency: 'CAKE-BNB LP',\n    currencyAddress: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\n    tokenDecimals: 18,\n    releaseBlockNumber: 4086064,\n  },\n]\n\nexport default ifos\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n"],"sourceRoot":""}